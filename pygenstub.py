from argparse import ArgumentParser
from docutils.core import publish_doctree

import ast


TYPING_NAMES = {'Any', 'Dict', 'Optional'}


def get_fields(node, container='field_list'):
    nodes = [c for c in node.children if c.tagname == container]
    if not nodes:
        return {}
    assert len(nodes) == 1
    node = nodes[0]
    fields = [{f.tagname[6:]: f.rawsource.strip() for f in n.children}
              for n in node.children if n.tagname == 'field']
    return {f['name']: f['body'] for f in fields}


def get_tree(source):
    with open(source, mode='r') as f:
        code = f.read()
    return ast.parse(code)


def get_imported_names(tree):
    return {name.name: node.module for node in tree.body
            if isinstance(node, ast.ImportFrom) for name in node.names}


def get_signatures(tree):
    signatures = {}
    for node in tree.body:
        if isinstance(node, ast.FunctionDef):
            docstring = ast.get_docstring(node)
            if docstring:
                doctree = publish_doctree(docstring)
                fields = get_fields(doctree)
                signature = fields.get('signature')
                if signature:
                    params = [arg.arg for arg in node.args.args]
                    signatures[node.name] = (signature, params)
    return signatures


def get_stub_data(signatures, imported_names):
    prototypes = []
    typing_lines = []
    import_lines = []
    for func, (sign, params) in sorted(signatures.items()):
        lhs, rtype = sign.split(' -> ')
        param_str = lhs[lhs.find('(')+1:lhs.rfind(')')]
        param_types = [s.strip() for s in param_str.split(',') if s.strip()]
        for t in TYPING_NAMES:
            if rtype.startswith(t):
                typing_line = 'from typing import %s' % (t,)
                typing_lines.append(typing_line)
        if rtype in imported_names:
            import_line = 'from %s import %s' % (imported_names[rtype], rtype)
            import_lines.append(import_line)
        params_stub = ', '.join([('%s: %s' % p) for p in zip(params, param_types)])
        signature = 'def %s(%s) -> %s: ...' % (func, params_stub, rtype)
        prototypes.append(signature)
    return prototypes, typing_lines + [''] + import_lines


def main():
    parser = ArgumentParser()
    parser.add_argument('source', help='source file to generate the stub for')
    arguments = parser.parse_args()

    tree = get_tree(arguments.source)
    imported_names = get_imported_names(tree)
    signatures = get_signatures(tree)

    prototypes, import_lines = get_stub_data(signatures, imported_names)
    if prototypes:
        stub = arguments.source + 'i'
        with open(stub, mode='w') as f:
            f.write('# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT.\n\n')
            if import_lines:
                f.write('\n'.join(import_lines) + '\n')
                f.write('\n\n')
            f.write('\n\n'.join(prototypes))
            f.write('\n')


if __name__ == '__main__':
    main()
